{"version":3,"file":"static/js/525.c6c40cfc.chunk.js","mappings":"qNAGaA,EAAW,WACtB,IAAMC,GAAYC,EAAAA,EAAAA,IAAYC,EAAAA,IAE5BC,EAMEH,EANFG,OACAC,EAKEJ,EALFI,WACAC,EAIEL,EAJFK,mBACAC,EAGEN,EAHFM,gBACAC,EAEEP,EAFFO,WACAC,EACER,EADFQ,cAEF,OACE,iCACE,oHAEkB,MAAfJ,GACC,wUAEAD,MAGJ,iGAEGG,EAFH,IAEqBC,MAErB,+EAEGF,EAFH,IAEwBG,OAI7B,E,8BCvBYC,EAAiB,WAC5B,IAAMC,GAAiBT,EAAAA,EAAAA,IAAYU,EAAAA,IAE7BC,GAAWC,EAAAA,EAAAA,MAejB,OACE,uEAEGH,EAAeI,KAAI,SAAAC,GAClB,OACE,yBACE,gBACEC,QAAS,WAZD,IAAAC,IAaMF,EAZxBH,GAASM,EAAAA,EAAAA,IAAqBD,IAE9BL,GAASO,EAAAA,EAAAA,GAAUF,GAWR,EAHH,SAKGF,MANIK,EAAAA,EAAAA,MAmBZ,IAC0B,IAA1BV,EAAeW,SACd,mBACEC,KAAK,SACLN,QAAS,WApCfJ,GAASW,EAAAA,EAAAA,MAsCF,EAJH,qBAWP,E,8BCzDKC,EAASC,EAAAA,KAAaC,MAAM,CAChCC,UAAWF,EAAAA,KAERG,QAAQ,WAAY,0EACpBC,SAAS,4KAGRC,EAAgB,CACpBH,UAAW,IAGPI,EAAW,WACf,IAAQC,GAAkBC,EAAAA,EAAAA,MAAlBD,cAEFE,GAAoBjC,EAAAA,EAAAA,IAAYkC,EAAAA,IAMtC,OAJAC,EAAAA,EAAAA,YAAU,WACRJ,EAAc,YAAaE,EAC5B,GAAE,CAACA,EAAmBF,KAGrB,iCACE,SAAC,KAAD,CAAOV,KAAK,OAAOe,KAAK,YAAYC,YAAY,kGAChD,SAAC,KAAD,CAAcD,KAAK,YAAYE,UAAU,UAG9C,EAEYC,EAAa,WACxB,IAAM5B,GAAWC,EAAAA,EAAAA,MACX4B,GAAQxC,EAAAA,EAAAA,IAAYyC,EAAAA,IAM1B,OACE,SAAC,KAAD,CACEZ,cAAeA,EACfa,iBAAkBnB,EAClBoB,SARiB,SAAAC,GACnBjC,GAASO,EAAAA,EAAAA,GAAU0B,EAAOlB,WAC3B,EAGC,UAKE,UAAC,KAAD,YACE,SAACI,EAAD,IACCU,IAAS,iIACV,mBAAQnB,KAAK,SAAb,0HAIP,ECrDc,SAASwB,IACtB,OACE,iCACE,SAACN,EAAD,KACA,SAACzC,EAAD,KACA,SAACU,EAAD,MAGL,C,gLCZM,IAAMP,EAAa,SAAA6C,GAAK,OAAIA,EAAMC,KAAKC,OAAf,EAElBP,EAAc,SAAAK,GAAK,OAAIA,EAAMC,KAAKE,SAAf,EAEnBvC,EAAoB,SAAAoC,GAAK,OAAIA,EAAMC,KAAKG,cAAf,EAEzBhB,EAAuB,SAAAY,GAAK,OAAIA,EAAMC,KAAKI,cAAf,EAE5BC,EAAwB,SAAAN,GAAK,OAAIA,EAAMC,KAAKM,eAAf,EAE7BC,EAAyB,SAAAR,GAAK,OAAIA,EAAMC,KAAKQ,gBAAf,C","sources":["components/InfoCard/InfoCard.jsx","components/RequestHistory/RequestHistory.jsx","components/SearchForm/SearchForm.jsx","pages/CheckTtn/CheckTtn.jsx","redux/selectors.js"],"sourcesContent":["import { useSelector } from 'react-redux';\nimport { selectInfo } from 'redux/selectors';\n\nexport const InfoCard = () => {\n  const cargoInfo = useSelector(selectInfo);\n  const {\n    Status,\n    StatusCode,\n    WarehouseRecipient,\n    WarehouseSender,\n    CitySender,\n    CityRecipient,\n  } = cargoInfo;\n  return (\n    <>\n      <div>\n        Статус доставки:\n        {StatusCode === '3' ? (\n          <div>Номер ТТН не знайдено. Перевірте номер та спробуйте ще раз</div>\n        ) : (\n          Status\n        )}\n      </div>\n      <div>\n        Відправлено:\n        {WarehouseSender}/{CitySender}\n      </div>\n      <div>\n        Отримано:\n        {WarehouseRecipient}/{CityRecipient}\n      </div>\n    </>\n  );\n};\n","import {\n  updateSelectedNumber,\n  // deleteSelectedNumber,\n  clearRequestHistory,\n} from 'redux/slice';\nimport { selectNumbersList } from 'redux/selectors';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchInfo } from 'redux/operations';\nimport { nanoid } from 'nanoid';\n\nexport const RequestHistory = () => {\n  const requestHistory = useSelector(selectNumbersList);\n\n  const dispatch = useDispatch();\n\n  // const deleteNumber = item => {\n  //   dispatch(deleteSelectedNumber(item));\n  // };\n\n  const clearHistory = () => {\n    dispatch(clearRequestHistory());\n  };\n\n  const handleClick = clickedNumber => {\n    dispatch(updateSelectedNumber(clickedNumber));\n\n    dispatch(fetchInfo(clickedNumber));\n  };\n  return (\n    <ul>\n      Історія\n      {requestHistory.map(item => {\n        return (\n          <li key={nanoid()}>\n            <div\n              onClick={() => {\n                handleClick(item);\n              }}\n            >\n              {item}\n            </div>\n\n            {/* <button\n              type=\"button\"\n              onClick={() => {\n                deleteNumber(item);\n              }}\n            >\n              X\n            </button> */}\n          </li>\n        );\n      })}\n      {requestHistory.length !== 0 && (\n        <button\n          type=\"button\"\n          onClick={() => {\n            clearHistory();\n          }}\n        >\n          clear\n        </button>\n      )}\n    </ul>\n  );\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { fetchInfo } from 'redux/operations';\nimport { selectError, selectSelectedNumber } from 'redux/selectors';\n\nimport { Formik, Form, Field, ErrorMessage, useFormikContext } from 'formik';\nimport * as yup from 'yup';\nimport { useEffect } from 'react';\n\nconst schema = yup.object().shape({\n  ttnNumber: yup\n    .string()\n    .matches(/^\\d{14}$/, 'Введіть 14 цифр')\n    .required(\"Поле обов'язкове для заповнення\"),\n});\n\nconst initialValues = {\n  ttnNumber: '',\n};\n\nconst TtnInput = () => {\n  const { setFieldValue } = useFormikContext();\n\n  const ttnSelectedNumber = useSelector(selectSelectedNumber);\n\n  useEffect(() => {\n    setFieldValue('ttnNumber', ttnSelectedNumber);\n  }, [ttnSelectedNumber, setFieldValue]);\n\n  return (\n    <>\n      <Field type=\"text\" name=\"ttnNumber\" placeholder=\"Введіть номер ТТН\" />\n      <ErrorMessage name=\"ttnNumber\" component=\"div\" />\n    </>\n  );\n};\n\nexport const SearchForm = () => {\n  const dispatch = useDispatch();\n  const error = useSelector(selectError);\n\n  const handleSubmit = values => {\n    dispatch(fetchInfo(values.ttnNumber));\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={schema}\n      onSubmit={handleSubmit}\n    >\n      <Form>\n        <TtnInput />\n        {error && <div>Невірний номер ТТН</div>}\n        <button type=\"submit\">Отримати статус ТТН</button>\n      </Form>\n    </Formik>\n  );\n};\n","import { InfoCard } from 'components/InfoCard/InfoCard';\nimport { RequestHistory } from 'components/RequestHistory/RequestHistory';\nimport { SearchForm } from 'components/SearchForm/SearchForm';\n\nexport default function CheckTtn() {\n  return (\n    <>\n      <SearchForm />\n      <InfoCard />\n      <RequestHistory />\n    </>\n  );\n}\n","export const selectInfo = state => state.info.ttnInfo;\n\nexport const selectError = state => state.info.infoError;\n\nexport const selectNumbersList = state => state.info.ttnNumbersList;\n\nexport const selectSelectedNumber = state => state.info.selectedNumber;\n\nexport const selectDepartmentsList = state => state.info.departmentsList;\n\nexport const selectDepartmentsError = state => state.info.departmentsError;\n"],"names":["InfoCard","cargoInfo","useSelector","selectInfo","Status","StatusCode","WarehouseRecipient","WarehouseSender","CitySender","CityRecipient","RequestHistory","requestHistory","selectNumbersList","dispatch","useDispatch","map","item","onClick","clickedNumber","updateSelectedNumber","fetchInfo","nanoid","length","type","clearRequestHistory","schema","yup","shape","ttnNumber","matches","required","initialValues","TtnInput","setFieldValue","useFormikContext","ttnSelectedNumber","selectSelectedNumber","useEffect","name","placeholder","component","SearchForm","error","selectError","validationSchema","onSubmit","values","CheckTtn","state","info","ttnInfo","infoError","ttnNumbersList","selectedNumber","selectDepartmentsList","departmentsList","selectDepartmentsError","departmentsError"],"sourceRoot":""}