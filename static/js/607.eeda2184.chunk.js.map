{"version":3,"file":"static/js/607.eeda2184.chunk.js","mappings":"yOAMMA,EAASC,EAAAA,KAAaC,MAAM,CAChCC,SAAUF,EAAAA,KAEPG,IAAI,GACJC,IAAI,IACJC,QACC,iPAEA,uRAEDC,aAGCC,EAAgB,CACpBL,SAAU,IAGCM,EAAkB,WAC7B,IAAMC,GAAWC,EAAAA,EAAAA,MAMjB,OACE,SAAC,KAAD,CACEH,cAAeA,EACfI,iBAAkBZ,EAClBa,SARiB,SAAAC,GACnBJ,GAASK,EAAAA,EAAAA,GAAiBD,EAAOX,UAClC,EAGC,UAKE,UAAC,KAAD,YACE,SAAC,KAAD,CAAOa,KAAK,OAAOC,KAAK,WAAWC,YAAY,8GAC/C,SAAC,KAAD,CAAcD,KAAK,WAAWE,UAAU,SACxC,mBAAQH,KAAK,SAAb,mHAIP,E,oBCvCYI,EAAwB,WACnC,IAAMC,GAAoBC,EAAAA,EAAAA,IAAYC,EAAAA,IAChCC,GAAmBF,EAAAA,EAAAA,IAAYG,EAAAA,IAErC,OACE,8BACGD,GACC,6KAEA,wBACGH,EAAkBK,KAAI,SAAAC,GAAI,OACzB,2BACE,yBAAMA,EAAKC,mBACX,yBAAMD,EAAKE,eACX,+BAAOF,EAAKG,UACZ,8GACA,yBAAMH,EAAKI,SAASC,UACpB,yBAAML,EAAKI,SAASE,WACpB,yBAAMN,EAAKI,SAASG,aACpB,yBAAMP,EAAKI,SAASI,YACpB,yBAAMR,EAAKI,SAASK,UACpB,yBAAMT,EAAKI,SAASM,YACpB,yBAAMV,EAAKI,SAASO,YAXbC,EAAAA,EAAAA,MADgB,OAmBpC,EC9Bc,SAASC,IACtB,OACE,iCACE,SAAC/B,EAAD,KACA,SAACW,EAAD,MAGL,C,gLCVM,IAAMqB,EAAa,SAAAC,GAAK,OAAIA,EAAMC,KAAKC,OAAf,EAElBC,EAAc,SAAAH,GAAK,OAAIA,EAAMC,KAAKG,SAAf,EAEnBC,EAAoB,SAAAL,GAAK,OAAIA,EAAMC,KAAKK,cAAf,EAEzBC,EAAuB,SAAAP,GAAK,OAAIA,EAAMC,KAAKO,cAAf,EAE5B3B,EAAwB,SAAAmB,GAAK,OAAIA,EAAMC,KAAKQ,eAAf,EAE7B1B,EAAyB,SAAAiB,GAAK,OAAIA,EAAMC,KAAKnB,gBAAf,C","sources":["components/DepartmentsForm/DepartmentsForm.jsx","components/DepartmentsListResult/DepartmentsListResult.jsx","pages/DepartmentList/DepartmentList.jsx","redux/selectors.js"],"sourcesContent":["import { Formik, Form, Field, ErrorMessage } from 'formik';\nimport { useDispatch } from 'react-redux';\nimport * as yup from 'yup';\n\nimport { fetchDepartments } from 'redux/operations';\n\nconst schema = yup.object().shape({\n  cityName: yup\n    .string()\n    .min(3)\n    .max(25)\n    .matches(\n      /^[А-ЩЬЮЯҐЄІЇ][а-щьюяґєії']*(-[А-ЩЬЮЯҐЄІЇ][а-щьюяґєії']+)*$/,\n\n      'Введіть назву міста літерами українського алфавіту'\n    )\n    .required(),\n});\n\nconst initialValues = {\n  cityName: '',\n};\n\nexport const DepartmentsForm = () => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = values => {\n    dispatch(fetchDepartments(values.cityName));\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={schema}\n      onSubmit={handleSubmit}\n    >\n      <Form>\n        <Field type=\"text\" name=\"cityName\" placeholder=\"Введіть назву міста\" />\n        <ErrorMessage name=\"cityName\" component=\"div\" />\n        <button type=\"submit\">Шукати відділення</button>\n      </Form>\n    </Formik>\n  );\n};\n","import { nanoid } from 'nanoid';\nimport { useSelector } from 'react-redux';\nimport { selectDepartmentsList, selectDepartmentsError } from 'redux/selectors';\n\nexport const DepartmentsListResult = () => {\n  const listOfDepartments = useSelector(selectDepartmentsList);\n  const departmentsError = useSelector(selectDepartmentsError);\n\n  return (\n    <>\n      {departmentsError ? (\n        <div>Такого міста немає у списку</div>\n      ) : (\n        <ul>\n          {listOfDepartments.map(item => (\n            <li key={nanoid()}>\n              <div>{item.CityDescription}</div>\n              <div>{item.Description}</div>\n              <div>+{item.Phone}</div>\n              <div>Розклад роботи</div>\n              <div>{item.Schedule.Monday}</div>\n              <div>{item.Schedule.Tuesday}</div>\n              <div>{item.Schedule.Wednesday}</div>\n              <div>{item.Schedule.Thersday}</div>\n              <div>{item.Schedule.Friday}</div>\n              <div>{item.Schedule.Saturday}</div>\n              <div>{item.Schedule.Sunday}</div>\n            </li>\n          ))}\n        </ul>\n      )}\n    </>\n  );\n};\n","import { DepartmentsForm } from 'components/DepartmentsForm/DepartmentsForm';\nimport { DepartmentsListResult } from 'components/DepartmentsListResult/DepartmentsListResult';\n\nexport default function DepartmentList() {\n  return (\n    <>\n      <DepartmentsForm />\n      <DepartmentsListResult />\n    </>\n  );\n}\n","export const selectInfo = state => state.info.ttnInfo;\n\nexport const selectError = state => state.info.infoError;\n\nexport const selectNumbersList = state => state.info.ttnNumbersList;\n\nexport const selectSelectedNumber = state => state.info.selectedNumber;\n\nexport const selectDepartmentsList = state => state.info.departmentsList;\n\nexport const selectDepartmentsError = state => state.info.departmentsError;\n"],"names":["schema","yup","shape","cityName","min","max","matches","required","initialValues","DepartmentsForm","dispatch","useDispatch","validationSchema","onSubmit","values","fetchDepartments","type","name","placeholder","component","DepartmentsListResult","listOfDepartments","useSelector","selectDepartmentsList","departmentsError","selectDepartmentsError","map","item","CityDescription","Description","Phone","Schedule","Monday","Tuesday","Wednesday","Thersday","Friday","Saturday","Sunday","nanoid","DepartmentList","selectInfo","state","info","ttnInfo","selectError","infoError","selectNumbersList","ttnNumbersList","selectSelectedNumber","selectedNumber","departmentsList"],"sourceRoot":""}